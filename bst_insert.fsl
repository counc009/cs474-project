(Function key   Loc Int)
(Function left  Loc Loc)
(Function right Loc Loc)

(RecFunction Min  Loc Int)
(RecFunction Max  Loc Int)
(Var plus_infty Int)
(Var minus_infty Int)

(RecFunction BST  Loc Bool)
(RecFunction Keys Loc SetInt)

(Var x Loc)

(RecDef (Min x) (ite (= x nil) plus_infty
                (ite (<= (key x) (Min (left x)))
                  (ite (<= (key x) (Min (right x)))
                    (key x)
                    (Min (right x))
                  )
                  (ite (<= (Min (left x)) (Min (right x)))
                    (Min (left x))
                    (Min (right x))
                  )
                )))
(RecDef (Max x) (ite (= x nil) minus_infty
                (ite (>= (key x) (Max (left x)))
                  (ite (>= (key x) (Max (right x)))
                    (key x)
                    (Max (right x))
                  )
                  (ite (>= (Max (left x)) (Max (right x)))
                    (Max (left x))
                    (Max (right x))
                  )
                )))

(RecDef (BST x) (ite (= x nil) True
                     (and (BST (left x))  (< (Max (left x)) (key x))
                          (BST (right x)) (< (key x) (Min (right x)))
                          (not (IsMember x (Sp (BST (antiSp (left x))))))
                          (not (IsMember x (Sp (BST (antiSp (right x)))))) )))
(RecDef (Keys x) (ite (= x nil) EmptySetInt
                      (SetAdd (SetUnion (Keys (left x)) (Keys (right x)))
                              (key x))))

(lemma (x) (< (key x) plus_infty))
(lemma (x) (< minus_infty (key x)))
(lemma (x) (=> (BST x) (= (Sp (BST x)) (Sp (Keys x)))))
(lemma (x) (=> (BST x) (= (Sp (Min x)) (Sp (BST x)))))
(lemma (x) (=> (BST x) (= (Sp (Max x)) (Sp (BST x)))))

(Var k Int)
(lemma (x) (=> (> (Min x) k) (not (IsMember k (Keys x)))))
(lemma (x) (=> (< (Max x) k) (not (IsMember k (Keys x)))))

(Var t1 Loc)
(Var t2 Loc)
(lemma (t1 t2) (=> (= (Keys t1) (SetAdd (Keys t2) k))
                   (ite (< k (Min t2))
                        (= (Min t1) k)
                        (= (Min t1) (Min t2)))))
(lemma (t1 t2) (=> (= (Keys t1) (SetAdd (Keys t2) k))
                   (ite (> k (Max t2))
                        (= (Max t1) k)
                        (= (Max t1) (Max t2)))))

(Var ret Loc)
(Var oldkeysx SetInt)
(Var tmp Loc)
(Var aux Loc)
(Var auxkeys SetInt)

(Program bst_insert (x oldkeysx k ret))
(Pre (and (BST x) (= (Keys x) oldkeysx)))
(Post (and (BST ret) (= (Keys ret) (SetAdd oldkeysx k))
           (ite True True (= (left ret) (left ret)))
           (ite True True (= (right ret) (right ret))) ))

(If (= x nil)
 Then
  (alloc ret)
  (assume (not (= ret nil)))
  
  (assign (key ret) k)
  (assign (left ret) nil)
  (assign (right ret) nil)
  (return)
 Else
  (If (= k (key x))
   Then
    (assign ret x)
    (return)
   Else
    (If (< k (key x))
     Then
      (assign aux (left x))
      (assign auxkeys (Keys aux))
      (call bst_insert (aux auxkeys k tmp))
      (assign (left x) tmp)
      (assign ret x)
      (return)
     Else
      (assign aux (right x))
      (assign auxkeys (Keys aux))
      (call bst_insert (aux auxkeys k tmp))
      (assign (right x) tmp)
      (assign ret x)
      (return)
    )
  )
)
