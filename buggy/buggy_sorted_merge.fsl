(Var x   Loc)
(Var y   Loc)

(Function next Loc Loc)
(Function key  Loc Int)

(Var plus_infty Int)
(RecFunction Min Loc Int)
(RecDef (Min x) (ite (= x nil) plus_infty (ite (< (key x) (Min (next x))) (key x) (Min (next x)))))

(RecFunction List   Loc Bool)
(RecFunction Keys   Loc SetInt)
(RecFunction Sorted Loc Bool)

(RecDef (List x) (ite (= x nil) True
                      (and (List (next x))
                           (not (IsMember x (Sp (List (antiSp (next x)))))))))
(RecDef (Keys x) (ite (= x nil) EmptySetInt
                 (SetAdd (Keys (next x)) (key x))))
(RecDef (Sorted x) (ite (= x nil) True
                      (and (Sorted (next x))
                           (not (IsMember x (Sp (Sorted (antiSp (next x))))))
                           (<= (key x) (Min (next x))))))

(lemma (x) (=> (Sorted x) (<= (Min x) plus_infty)))
(lemma (x) (=> (Sorted x) (= (Sp (Keys x)) (Sp (Sorted x)))))
(lemma (x) (=> (List x)   (= (Sp (Keys x)) (Sp (List x)))))

(Var aux Loc)
(Var tmp Loc)
(Var ret Loc)

(Program sorted_merge (x y) (ret))
(Pre (and (Sorted x) (Sorted y) ))
(Post (and (Sorted ret) (= (Keys ret) (SetUnion (Old (Keys x)) (Old (Keys y))))
           (ite (<= (Old (Min x)) (Old (Min y)))
                (= (Min ret) (Old (Min x)))
                (= (Min ret) (Old (Min y)))) ))

(If (= x nil)
 Then
  (assign ret y)
  (return)
 Else
  (If (= y nil)
   Then
    (assign ret x)
    (return)
   Else
    (If (<= (key x) (key y))
     Then
      (assign aux (next x))
      (call sorted_merge (aux y) (tmp))
      (assign (next x) tmp)
      (assign ret x)
      (return)
     Else
      (assign aux (next y))
      (call sorted_merge (x aux) (tmp))
      (assign (next y) tmp)
      (assign ret y)
      (return)
    )
  )
)
