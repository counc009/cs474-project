(Var x   Loc)
(Var y   Loc)
(Var fst Loc)
(Var snd Loc)
(Var aux Loc)
(Var rt1 Loc)
(Var rt2 Loc)

(Function next Loc Loc)
(Function key  Loc Int)

(RecFunction List   Loc Bool)
(RecFunction Keys   Loc SetInt)

(RecDef (List x) (ite (= x nil) True
                      (and (List (next x))
                           (not (IsMember x (Sp (List (antiSp (next x)))))))))
(RecDef (Keys x) (ite (= x nil) EmptySetInt
                 (SetAdd (Keys (next x)) (key x))))

(Var oldkeysx   SetInt)
(Var oldkeysaux SetInt)

(Program sll_split (x oldkeysx fst snd))
(Pre (List x))
(Post (and (List fst) (List snd) (= (SetUnion (Keys fst) (Keys snd)) oldkeysx)
           (= (SetIntersect (Sp (List fst)) (Sp (List snd))) EmptySetLoc)))

(assume (= oldkeysx (Keys x)))

(If (= x nil)
 Then
  (assign fst x)
  (assign snd x)
  (return)
 Else
  (assign fst x)
  (If (= (next x) nil)
   Then
    (assign snd (next x))
    (return)
   Else
    (assign snd (next x))
    (assign aux (next (next x)))
    (assign oldkeysaux (Keys aux))
    (call sll_split (aux oldkeysaux rt1 rt2))
    (assign (next fst) rt1)
    (assign (next snd) rt2)
    (return)
  )
)
