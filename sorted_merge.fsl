(Var x   Loc)
(Var y   Loc)
(Var ret Loc)

(Function next Loc Loc)
(Function key  Loc Int)

(Var plus_infty Int)
(RecFunction Min Loc Int)
(RecDef (Min x) (ite (= x nil) plus_infty (ite (< (key x) (Min (next x))) (key x) (Min (next x)))))

(RecFunction Keys   Loc SetInt)
(RecFunction Sorted Loc Bool)

(RecDef (Keys x) (ite (= x nil) EmptySetInt
                 (SetAdd (Keys (next x)) (key x))))
(RecDef (Sorted x) (ite (= x nil) True
                      (and (Sorted (next x))
                           (not (IsMember x (Sp (Sorted (antiSp (next x))))))
                           (<= (key x) (Min (next x))))))

(lemma (x) (< (key x) plus_infty))
(lemma (x) (=> (Sorted x) (= (SPKeys x) (SPSorted x))))

(Var oldkeysx SetInt)
(Var oldkeysy SetInt)
(Var aux Loc)
(Var oldkeysaux SetInt)
(Var tmp Loc)

(Program sll_merge (x y oldkeysx oldkeysy ret))
(Pre (and (Sorted x) (Sorted y)
          (= (SetIntersect (Sp (Sorted x)) (Sp (Sorted y))) EmptySetLoc)))
(Post (and (Sorted ret) (= (Keys ret) (SetUnion oldkeysx oldkeysy))))

(assume (= oldkeysx (Keys x)))
(assume (= oldkeysy (Keys y)))

(If (= x nil)
 Then
  (assign ret y)
  (return)
 Else
  (If (= y nil)
   Then
    (assign ret x)
    (return)
   Else
    (If (<= (key x) (key y))
     Then
      (assign aux (next x))
      (assign oldkeysaux (Keys aux))
      (call sll_merge (aux y oldkeysaux oldkeysy tmp))
      (assume (<= (key x) (Min tmp)))
      (assign (next x) tmp)
      (assign ret x)
      (return)
     Else
      (assign aux (next y))
      (assign oldkeysaux (Keys aux))
      (call sll_merge (x aux oldkeysx oldkeysaux tmp))
      (assume (<= (key y) (Min tmp)))
      (assign (next y) tmp)
      (assign ret y)
      (return)
    )
  )
)
