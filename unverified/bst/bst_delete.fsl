(Function key   Loc Int)
(Function left  Loc Loc)
(Function right Loc Loc)

(RecFunction Min  Loc Int)
(RecFunction Max  Loc Int)
(Var plus_infty Int)
(Var minus_infty Int)

(RecFunction BST  Loc Bool)
(RecFunction Keys Loc SetInt)

(Var x Loc)

(RecDef (Min x) (ite (= x nil) plus_infty
                (ite (<= (key x) (Min (left x)))
                  (ite (<= (key x) (Min (right x)))
                    (key x)
                    (Min (right x))
                  )
                  (ite (<= (Min (left x)) (Min (right x)))
                    (Min (left x))
                    (Min (right x))
                  )
                )))
(RecDef (Max x) (ite (= x nil) minus_infty
                (ite (>= (key x) (Max (left x)))
                  (ite (>= (key x) (Max (right x)))
                    (key x)
                    (Max (right x))
                  )
                  (ite (>= (Max (left x)) (Max (right x)))
                    (Max (left x))
                    (Max (right x))
                  )
                )))

(RecDef (BST x) (ite (= x nil) True
                     (and (BST (left x))  (< (Max (left x)) (key x))
                          (BST (right x)) (< (key x) (Min (right x)))
                          (not (IsMember x (Sp (BST (antiSp (left x))))))
                          (not (IsMember x (Sp (BST (antiSp (right x))))))
                          (= EmptySetLoc
                            (SetIntersect (Sp (BST (antiSp (left x))))
                                          (Sp (BST (antiSp (right x)))))) )))
(RecDef (Keys x) (ite (= x nil) EmptySetInt
                      (SetAdd (SetUnion (Keys (left x)) (Keys (right x)))
                              (key x))))

(lemma (x) (< (key x) plus_infty))
(lemma (x) (< minus_infty (key x)))
(lemma (x) (=> (BST x) (= (Sp (BST x)) (Sp (Keys x)))))
(lemma (x) (=> (BST x) (= (Sp (Min x)) (Sp (BST x)))))
(lemma (x) (=> (BST x) (= (Sp (Max x)) (Sp (BST x)))))

(Var k Int)
(lemma (x) (=> (> (Min x) k) (not (IsMember k (Keys x)))))
(lemma (x) (=> (< (Max x) k) (not (IsMember k (Keys x)))))

(lemma (x) (=> (not (= x nil))
              (= (SetUnion (Keys (left x)) (Keys (right x)))
                 (SetDel (Keys x) (key x)))))

(Var t1 Loc)
(Var t2 Loc)
(lemma (t1 t2) (=> (= (Keys t1) (SetDel (Keys t2) k)) (>= (Min t1) (Min t2))))
(lemma (t1 t2) (=> (= (Keys t1) (SetDel (Keys t2) k)) (<= (Max t1) (Max t2))))

(Var lft Loc)
(Var rht Loc)
(Var right_left Loc)
(Var tmp Loc)
(Var ret Loc)

(Var xl Loc)
(Var xr Loc)

(Program bst_remove_root (x k ret))
(Pre (and (not (= x nil)) (BST x) (= (key x) k) ))
(Post (and (BST ret) (= (Keys ret) (SetDel (Old (Keys x)) k)) ))

(If (and (= (left x) nil) (= (right x) nil))
 Then
  (free x)
  (assign ret nil)
  (return)
 Else (If (= (left x) nil)
 Then
  (assign ret (right x))
  (free x)
  (return)
 Else (If (= (right x) nil)
 Then
  (assign ret (left x))
  (free x)
  (return)
 Else
  (assign rht (right x))
  (assign right_left (left rht))

  (assign (right x) right_left)
  (call bst_remove_root (x k tmp))
  
  (assign (left rht) tmp)
  (return)
)))

(Program bst_delete (x k ret))
(Pre (BST x))
(Post (and (BST ret) (= (Keys ret) (SetDel (Old (Keys x)) k))
           (ite True True (= (left ret) (left ret)))
           (ite True True (= (right ret) (right ret))) ))

(If (= x nil)
 Then
  (assign ret x)
  (return)
 Else (If (= (key x) k)
 Then
  (assign lft (left x))
  (assign rht (right x))
  (call bst_remove_root (x k ret))
  (return)
 Else (If (< k (key x))
 Then
  (assign xl (left x))
  (call bst_delete (xl k tmp))
  (assign (left x) tmp)
  (assign ret x)
  (return)
 Else
  (assign xr (right x))
  (call bst_delete (xr k tmp))
  (assign (right x) tmp)
  (assign ret x)
  (return)
)))

/* BB 2 & 3 fail to verify due to the free and it seems to mess up use of Old()
 * BB 5, last else case of bst_remove_root, runs for more than 6 minutes
 */
