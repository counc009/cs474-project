(Function key   Loc Int)
(Function color Loc Int)
(Function left  Loc Loc)
(Function right Loc Loc)

(RecFunction Min  Loc Int)
(RecFunction Max  Loc Int)
(Var plus_infty Int)
(Var minus_infty Int)

(RecFunction Black Loc Bool)
(RecFunction BH Loc Int)

(RecFunction BST  Loc Bool)
(RecFunction RBT  Loc Bool)
(RecFunction Keys Loc SetInt)

(Var x Loc)

(RecDef (Min x) (ite (= x nil) plus_infty
                (ite (<= (key x) (Min (left x)))
                  (ite (<= (key x) (Min (right x)))
                    (key x)
                    (Min (right x))
                  )
                  (ite (<= (Min (left x)) (Min (right x)))
                    (Min (left x))
                    (Min (right x))
                  )
                )))
(RecDef (Max x) (ite (= x nil) minus_infty
                (ite (>= (key x) (Max (left x)))
                  (ite (>= (key x) (Max (right x)))
                    (key x)
                    (Max (right x))
                  )
                  (ite (>= (Max (left x)) (Max (right x)))
                    (Max (left x))
                    (Max (right x))
                  )
                )))

(RecDef (Black x) (ite (= x nil) True (= (color x) (IntConst 0))))
(RecDef (BH x) (ite (= x nil) (IntConst 1)
               (ite (Black x)
                    (+ (IntConst 1)
                      (ite (< (BH (left x)) (BH (right x)))
                        (BH (right x)) (BH (left x))))
                    (ite (< (BH (left x)) (BH (right x)))
                      (BH (right x)) (BH (left x))))))

(RecDef (BST x) (ite (= x nil) True
                     (and (BST (left x))  (< (Max (left x)) (key x))
                          (BST (right x)) (< (key x) (Min (right x)))
                          (not (IsMember x (Sp (BST (antiSp (left x))))))
                          (not (IsMember x (Sp (BST (antiSp (right x))))))
                          (= EmptySetLoc (SetIntersect
                            (Sp (BST (antiSp (left x))))
                            (Sp (BST (antiSp (right x)))))) )))
(RecDef (RBT x) (ite (= x nil) True
                     (and (BST x) (RBT (left x)) (RBT (right x))
                          (= (BH (left x)) (BH (right x)))
                          (ite (Black x) True
                            (and (Black (left x)) (Black (right x)))) )))

(RecDef (Keys x) (ite (= x nil) EmptySetInt
                      (SetAdd (SetUnion (Keys (left x)) (Keys (right x)))
                              (key x))))

(lemma (x) (=> (BST x) (IsSubset (Sp (Min x)) (Sp (BST x)))))
(lemma (x) (=> (BST x) (IsSubset (Sp (Max x)) (Sp (BST x)))))
(lemma (x) (=> (BST x) (IsSubset (Sp (Keys x)) (Sp (BST x)))))
(lemma (x) (=> (RBT x) (= (Sp (RBT x)) (Sp (BST x)))))

(lemma (x) (=> (RBT x) (=> (not (= x nil))
                          (not (IsMember x (Sp (RBT (antiSp (left x)))))))))
(lemma (x) (=> (RBT x) (=> (not (= x nil))
                          (not (IsMember x (Sp (RBT (antiSp (right x)))))))))

(lemma (x) (=> (RBT x) (<= (IntConst 1) (BH x))))
(lemma (x) (=> (RBT x) (=> (< (IntConst 1) (BH x)) (not (= x nil)))))

(Var k Int)
(lemma (x) (=> (BST x) (=> (> (Min x) k) (not (IsMember k (Keys x))))))
(lemma (x) (=> (BST x) (=> (< (Max x) k) (not (IsMember k (Keys x))))))

(Var iret Int)
(Var fixed Bool)
(Var tmp Loc)
(Var ret Loc)

(Var xl Loc)
(Var xll Loc)
(Var xlr Loc)
(Var xlrl Loc)
(Var xlrr Loc)
(Var xr Loc)
(Var xrl Loc)
(Var xrr Loc)
(Var xrll Loc)
(Var xrlr Loc)

(Var xcolor Int)
(Var xlcolor Int)
(Var xllcolor Int)
(Var xlrcolor Int)
(Var xrcolor Int)
(Var xrlcolor Int)
(Var xrrcolor Int)

(Program rbt_find_smallest (x) (iret))
(Pre (and (RBT x) (not (= x nil)) ))
(Post (and (RBT x) (= (Keys x) (Old (Keys x))) (= (BH x) (Old (BH x)))
           (= (Min x) (Old (Min x))) (= (Max x) (Old (Max x)))
           (= (Black x) (Old (Black x))) (= iret (Min x)) ))

(If (= (left x) nil)
 Then
  (assume (<= (key x) plus_infty))
  (assign iret (key x))
  (return)
 Else
  (assign tmp (left x))
  (call rbt_find_smallest (tmp) (iret))
  (return)
)

(Program rbt_delete_left_fixup (x) (ret fixed))
(Pre (and (not (= x nil)) (BST x) (RBT (left x)) (RBT (right x)) (Black (left x))
          (= (+ (IntConst 1) (BH (left x))) (BH (right x)))
          (ite (= (color x) (IntConst 0)) True (Black (right x))) ))
(Post (and (RBT ret)                     (* 1 *)
           (= (Keys ret) (Old (Keys x))) (* 2 *)
           (= (Min ret) (Old (Min x)))   (* 3 *)
           (= (Max ret) (Old (Max x)))   (* 4 *)
           (ite (Black ret) True (not (Old (Black x)))) (* 5 *)
           (ite fixed (= (BH ret) (Old (BH x)))
                      (and (Old (Black x))
                           (= (BH ret) (- (Old (BH x)) (IntConst 1))))) ))

(assign xl (left x))
(assign xr (right x))
(assign xcolor (color x))
(assign xrcolor (color xr))

(If (not (= xrcolor (IntConst 0)))
 Then
  (assign xrl (left xr))
  (assign (right x) xrl)
  (assign (color x) (IntConst 1))
  (assign (color xr) (IntConst 0))
  (call rbt_delete_left_fixup (x) (tmp fixed))
  (assign (left xr) tmp)
  (assign ret xr)
  (return)
 Else
  (assign xrl (left xr))
  (assign xrr (right xr))
  (If (not (Black xrr))
   Then
    (assign fixed True)
    (assign (right x) xrl)
    (assign (left xr) x)
    (assign (color xr) xcolor)
    (assign (color x) (IntConst 0))
    (assign (color xrr) (IntConst 0))
    (assign ret xr)
    (return)
   Else
    (If (Black xrl)
     Then
      (assign fixed (not (= xcolor (IntConst 0))))
      (assign (color xr) (IntConst 1))
      (assign (color x) (IntConst 0))
      (assign ret x)
      (return)
     Else
      (assign fixed True)
      (assign xrll (left xrl))
      (assign xrlr (right xrl))
      (assign (left xr) xrlr)
      (assign (right xrl) xr)
      (assign (left xrl) x)
      (assign (right x) xrll)
      (assign (color xrl) xcolor)
      (assign (color x) (IntConst 0))
      (assign ret xrl)
      (return)
    )
  )
)

(Program rbt_delete_right_fixup (x) (ret fixed))
(Pre (and (not (= x nil)) (BST x) (RBT (left x)) (RBT (right x)) (Black (right x))
          (= (+ (IntConst 1) (BH (right x))) (BH (left x)))
          (ite (= (color x) (IntConst 0)) True (Black (left x))) ))
(Post (and (RBT ret) (= (Keys ret) (Old (Keys x)))
           (= (Min ret) (Old (Min ret))) (= (Max ret) (Old (Max ret)))
           (ite (Black ret) True (not (Old (Black x))))
           (ite fixed (= (BH ret) (Old (BH x)))
                      (and (Old (Black x))
                           (= (BH ret) (- (Old (BH x)) (IntConst 1))))) ))

(assign xl (left x))
(assign xr (right x))
(assign xcolor (color x))
(assign xlcolor (color xl))

(If (not (= xlcolor (IntConst 0)))
 Then
  (assign xlr (right xl))
  (assign (left x) xlr)
  (assign (right xl) x)
  (assign (color x) (IntConst 1))
  (assign (color xl) (IntConst 0))
  (call rbt_delete_right_fixup (x) (tmp fixed))
  (assign (right xl) tmp)
  (assign ret xl)
  (return)
 Else
  (assign xlr (right xl))
  (assign xll (left xl))
  (If (not (Black xll))
   Then
    (assign fixed True)
    (assign (left x) xlr)
    (assign (right xl) x)
    (assign (color xl) xcolor)
    (assign (color x) (IntConst 0))
    (assign (color xll) (IntConst 0))
    (assign ret xl)
    (return)
   Else
    (If (Black xlr)
     Then
      (assign fixed (not (= xcolor (IntConst 0))))
      (assign (color xl) (IntConst 1))
      (assign (color x) (IntConst 0))
      (assign ret x)
      (return)
     Else
      (assign fixed True)
      (assign xlrr (right xlr))
      (assign xlrl (left xlr))
      (assign (right xl) xlrl)
      (assign (left xlr) xl)
      (assign (right xlr) x)
      (assign (left x) xlrr)
      (assign (color xlr) xcolor)
      (assign (color x) (IntConst 0))
      (assign ret xlr)
      (return)
    )
  )
)

(Program rbt_delete (x k) (ret fixed))
(Pre (RBT x))
(Post (and (RBT ret) 
           (= (Keys ret) (SetDel (Old (Keys x)) k))
           (<= (Old (Min x)) (Min ret)) (<= (Max ret) (Old (Max x)))
           (ite (and (IsMember k (Old (Keys x))) (= k (Old (Min x))))
                (< (Old (Min x)) (Min ret)) True)
           (ite (Black ret) True (not (Old (Black x))))
           (ite (= (BH ret) (Old (BH x))) fixed
                (and (= (BH ret) (- (Old (BH x)) (IntConst 1)))
                     (not fixed) (Old (Black x)))) ))

(If (= x nil)
 Then
  (assign fixed True)
  (assign ret x)
  (return)
 Else (If (= k (key x))
 Then
  (assign xl (left x))
  (assign xr (right x))
  (If (and (= xl nil) (= xr nil))
   Then
    (assign fixed (not (= (color x) (IntConst 0))))
    (free x)
    (assign ret nil)
    (return)
   Else (If (= xl nil)
   Then
    (assign (color xr) (IntConst 0))
    (free x)
    (assign fixed True)
    (assign ret xr)
    (return)
   Else (If (= xr nil)
   Then
    (assign (color xl) (IntConst 0))
    (free x)
    (assign fixed True)
    (assign ret xl)
    (return)
   Else
    (call rbt_find_smallest (xr) (iret))
    (assign (key x) iret)
    (call rbt_delete (xr iret) (tmp fixed))
    (assign (right x) tmp)
    (If fixed
     Then
      (assign ret x)
      (return)
     Else
      (call rbt_delete_right_fixup (x) (ret fixed))
      (return)
    )
  )))
 Else (If (< k (key x))
 Then
  (assign xl (left x))
  (call rbt_delete (xl k) (tmp fixed))
  (assign (left x) tmp)

  (If fixed
   Then
    (assign ret x)
    (return)
   Else
    (call rbt_delete_left_fixup (x) (ret fixed))
    (return)
  )
 Else
  (assign xr (right x))
  (call rbt_delete (xr k) (tmp fixed))
  (assign (right x) tmp)

  (If fixed
   Then
    (assign ret x)
    (return)
   Else
    (call rbt_delete_right_fixup (x) (ret fixed))
    (return)
  )
)))
