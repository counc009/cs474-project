(Function key   Loc Int)
(Function left  Loc Loc)
(Function right Loc Loc)

(RecFunction Min  Loc Int)
(RecFunction Max  Loc Int)
(Var plus_infty Int)
(Var minus_infty Int)

(RecFunction BST  Loc Bool)
(RecFunction Keys Loc SetInt)

(Var x Loc)

(RecDef (Min x) (ite (= x nil) plus_infty
                (ite (<= (key x) (Min (left x)))
                  (ite (<= (key x) (Min (right x)))
                    (key x)
                    (Min (right x))
                  )
                  (ite (<= (Min (left x)) (Min (right x)))
                    (Min (left x))
                    (Min (right x))
                  )
                )))
(RecDef (Max x) (ite (= x nil) minus_infty
                (ite (>= (key x) (Max (left x)))
                  (ite (>= (key x) (Max (right x)))
                    (key x)
                    (Max (right x))
                  )
                  (ite (>= (Max (left x)) (Max (right x)))
                    (Max (left x))
                    (Max (right x))
                  )
                )))

(RecDef (BST x) (ite (= x nil) True
                     (and (BST (left x))  (< (Max (left x)) (key x))
                          (BST (right x)) (< (key x) (Min (right x)))
                          (not (IsMember x (Sp (BST (antiSp (left x))))))
                          (not (IsMember x (Sp (BST (antiSp (right x))))))
                          (= EmptySetLoc
                            (SetIntersect (Sp (BST (antiSp (left x))))
                                          (Sp (BST (antiSp (right x)))))) )))
(RecDef (Keys x) (ite (= x nil) EmptySetInt
                      (SetAdd (SetUnion (Keys (left x)) (Keys (right x)))
                              (key x))))

(lemma (x) (< (key x) plus_infty))
(lemma (x) (< minus_infty (key x)))
(lemma (x) (=> (BST x) (= (Sp (BST x)) (Sp (Keys x)))))
(lemma (x) (=> (BST x) (= (Sp (Min x)) (Sp (BST x)))))
(lemma (x) (=> (BST x) (= (Sp (Max x)) (Sp (BST x)))))

(Var t1 Loc)
(Var t2 Loc)
(Var t3 Loc)
(Var k Int)
(lemma (t1 t2 t3) (=> (= (Keys t3) (SetUnion (Keys t1) (Keys t2)))
                      (ite (<= (Min t1) (Min t2)) (= (Min t3) (Min t1))
                                                  (= (Min t3) (Min t2)))))
(lemma (t1 t2 t3) (=> (= (Keys t3) (SetUnion (Keys t1) (Keys t2)))
                      (ite (>= (Max t1) (Max t2)) (= (Max t3) (Max t1))
                                                  (= (Max t3) (Max t2)))))
(lemma (t1 t2) (=> (= (Keys t2) (SetAdd (Keys t1) k))
                   (ite (<= k (Min t1)) (= (Min t2) k) (= (Min t2) (Min t1)))))
(lemma (t1 t2) (=> (= (Keys t2) (SetAdd (Keys t1) k))
                   (ite (>= k (Max t1)) (= (Max t2) k) (= (Max t2) (Max t1)))))

(Var lft Loc)
(Var ret Loc)
(Var left_right Loc)

(Program rotate_left (x ret))
(Pre (and (BST x) (not (= x nil)) (not (= (left x) nil)) ))
(Post (and (BST ret) (= (Keys ret) (Old (Keys x)))
           (BST (right (right ret))) (BST (left ret)) ))

(assign lft (left x))
(assign left_right (right lft))
(assign (left x) left_right)
(assign (right lft) x)
(assign ret lft)
(return)
