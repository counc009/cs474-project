(Function key   Loc Int)
(Function color Loc Int)
(Function left  Loc Loc)
(Function right Loc Loc)

(RecFunction Min  Loc Int)
(RecFunction Max  Loc Int)
(Var plus_infty Int)
(Var minus_infty Int)

(RecFunction Black Loc Bool)
(RecFunction BH Loc Int)

(RecFunction BST  Loc Bool)
(RecFunction RBT  Loc Bool)
(RecFunction Keys Loc SetInt)

(Var x Loc)

(RecDef (Min x) (ite (= x nil) plus_infty
                (ite (<= (key x) (Min (left x)))
                  (ite (<= (key x) (Min (right x)))
                    (key x)
                    (Min (right x))
                  )
                  (ite (<= (Min (left x)) (Min (right x)))
                    (Min (left x))
                    (Min (right x))
                  )
                )))
(RecDef (Max x) (ite (= x nil) minus_infty
                (ite (>= (key x) (Max (left x)))
                  (ite (>= (key x) (Max (right x)))
                    (key x)
                    (Max (right x))
                  )
                  (ite (>= (Max (left x)) (Max (right x)))
                    (Max (left x))
                    (Max (right x))
                  )
                )))

(RecDef (Black x) (ite (= x nil) True (= (color x) (IntConst 1))))
(RecDef (BH x) (ite (= x nil) (IntConst 1)
               (ite (Black x)
                    (+ (IntConst 1)
                      (ite (< (BH (left x)) (BH (right x)))
                        (BH (right x)) (BH (left x))))
                    (ite (< (BH (left x)) (BH (right x)))
                      (BH (right x)) (BH (left x))))))

(RecDef (BST x) (ite (= x nil) True
                     (and (BST (left x))  (< (Max (left x)) (key x))
                          (BST (right x)) (< (key x) (Min (right x)))
                          (not (IsMember x (Sp (BST (antiSp (left x))))))
                          (not (IsMember x (Sp (BST (antiSp (right x))))))
                          (= EmptySetLoc (SetIntersect
                            (Sp (BST (antiSp (left x))))
                            (Sp (BST (antiSp (right x)))))) )))
(RecDef (RBT x) (ite (= x nil) True
                     (and (BST x) (RBT (left x)) (RBT (right x))
                          (= (BH (left x)) (BH (right x)))
                          (ite (Black x) True
                            (and (Black (left x)) (Black (right x)))) )))

(RecDef (Keys x) (ite (= x nil) EmptySetInt
                      (SetAdd (SetUnion (Keys (left x)) (Keys (right x)))
                              (key x))))

(lemma (x) (=> (BST x) (IsSubset (Sp (Min x)) (Sp (BST x)))))
(lemma (x) (=> (BST x) (IsSubset (Sp (Max x)) (Sp (BST x)))))
(lemma (x) (=> (BST x) (IsSubset (Sp (Keys x)) (Sp (BST x)))))
(lemma (x) (=> (RBT x) (= (Sp (RBT x)) (Sp (BST x)))))

(lemma (x) (=> (RBT x) (=> (not (= x nil))
                          (not (IsMember x (Sp (RBT (antiSp (left x)))))))))
(lemma (x) (=> (RBT x) (=> (not (= x nil))
                          (not (IsMember x (Sp (RBT (antiSp (right x)))))))))

(Var k Int)
(Var ret Loc)
(Var tmp Loc)
(Var aux Loc)

(Program rbt_insert_helper (x k) (ret))
(Pre (and (RBT x) (< minus_infty k) (< k plus_infty) ))
(* The post condition is that we produce a BST, the black height is preserved
   but it is possible that the root and one of its children are both red. *)
(Post (and (* Returns a BST *)
           (BST ret) (* 1 *)
           (* with the keys of the old tree with k added *)
           (= (Keys ret) (SetAdd (Old (Keys x)) k)) (* 2 *)
           (* Properties of min/max *)
           (ite (< k (Old (Min x))) (= (Min ret) k) (= (Min ret) (Old (Min x)))) (* 3 *)
           (ite (> k (Old (Max x))) (= (Max ret) k) (= (Max ret) (Old (Max x)))) (* 4 *)
           (* BH is preserved *)
           (= (BH ret) (Old (BH x))) (* 5 *)
           (* Children are still RBT *)
           (RBT (left ret)) (* 6 *) (RBT (right ret)) (* 7 *)
           (* and their heights are the same *)
           (= (BH (left ret)) (BH (right ret))) (* 8 *)
           (* If the root is red, at least one of its children is black and if
              it used to be black, both of its children are *)
           (ite (Black ret) True
             (ite (Old (Black x)) (and (Black (left ret)) (Black (right ret)))
                (or (Black (left ret)) (Black (right ret))))) (* 9 *)
           (* For instantiation sake *)
           (ite True True
              (and (= (left  (left  ret)) (left  (left  ret)))
                   (= (left  (right ret)) (left  (right ret)))
                   (= (right (left  ret)) (right (left  ret)))
                   (= (right (right ret)) (right (right ret))))) (* 10 *) ))

(If (= x nil)
 Then
  (alloc ret)
  (assume (not (= ret nil)))
  (assign (key ret) k)
  (assign (color ret) (IntConst 0)) (* Assign color red *)
  (assign (left ret) nil)
  (assign (right ret) nil)
  (return) (* Correct by definition of RBT *)
 Else (If (= k (key x))
 Then
  (assign ret x)
  (return) (* Post condition is implied by RBT property *)
 Else (If (< k (key x))
 Then
  (assign aux (left x))
  (call rbt_insert_helper (aux k) (tmp))
  (* tmp is an RBT except maybe its root and one child are both red *)
  (If (or (Black tmp) (and (Black (left tmp)) (Black (right tmp))))
   Then
    (* tmp is just an RBT *)
    (assign (left x) tmp)
    (assign ret x) (* x could have been red and tmp could have also *)
    (return) (* Nothing to do, directly from post condition of function call *)
   Else
    (* tmp is broken, the root and one child are both red *)
    (If (not (Black (left tmp)))
     Then
      (* left child of tmp is red *)
      (assign (left x) (right tmp)) (* right subtree of tmp becomes left subtree of x, this is black *)
      (* The BH of tmp is the same as the BH of the right(x) from Conjunct 5 and RBT def *)
      (* Hence, since tmp is red, BH of right(tmp) is equal to BH of right(x) *)
      (* x is an RBT based on a bunch of things:
         - frame rule: right(x) still RBT and color of x is still the same
         - post condition: left(x) RBT (6) and keys in right(tmp) less than x (4)
         - reasoning above about BH being equal
         - right(tmp) is black since left(tmp) is not *)
      (assign (right tmp) x) (* take x and make it the right child of tmp *)
      (* since tmp and left tmp are red it must be the case that left(x) was
         originally red by conjunct 9 *)
      (* therefore by RBT definition, x is black *)
      (* The BH of left tmp is the same as the BH of left x by conjunct 8 *)
      (* BH of left tmp is one less than BH of x *)
      (assign (color (left tmp)) (IntConst 1)) (* Assign left tmp to be be black *)
      (* now black heights of left tmp and x are the same *)
      (* Conjuncts
         1-4. Keys/Min/Max: frame rule, post conditions
         5. by frame rule BH of right x unchanged, since BH of left x is equal
            to that, and x is black and was black, the BH of x is unchanged,
            since BH of left tmp is equal to BH of x and tmp is red, BH of
            tmp is the same as the BH of x
         6. follows from post condition conjunct 6
         7. since x is an RBT as argued above
         8. as argued above
         9. tmp is red but both of its children are black, infact since x was
            originally black its the and case in the inner ite *)
      (assign ret tmp)
      (return)
     Else (* right tmp is red *)
      (assign ret (right tmp))
      (assign (left x) (right ret)) (* Take the right subtree of right tmp *)
      (* We know this must be black by RBT property *)
      (* Based on keys/min/max we know x is still a BST whose keys are all 
         greater than the key of ret *)
      (* x is RBT, the BH of right ret is the same as the BH of right x because
         BH of tmp is equal to BH of original left x by conjunct 5 and thats
         equal to the BH of right x by RBT definition *)
      (assign (right tmp) (left ret)) (* Take the left subtree of right tmp *)
      (* We know this must be black by RBT property *)
      (* Based on keys/min/max we know its all its keys are greater than the
         key of tmp but less than the key of ret *)
      (* Now tmp is RBT since left tmp and right tmp have the same BH by 8 and
         since right tmp is red, the black height of left of right of tmp is
         equal to the BH of left tmp and both children of tmp are black *)
      (assign (left ret) tmp)
      (assign (right ret) x)
      (assign (color tmp) (IntConst 1))
      (* Recolor tmp since x is black but tmp is red, this makes the height of
         these two subtrees equal and still equal to the BH of the original
         x *)
      (return)
    )
  )
 Else
  (assign aux (right x))
  (call rbt_insert_helper (aux k) (tmp))
  (If (or (Black tmp) (and (Black (left tmp)) (Black (right tmp))))
   Then
    (assign (right x) tmp)
    (assign ret x)
    (return)
   Else
    (If (not (Black (left tmp)))
     Then
      (assign ret (left tmp))
      (assign (right x) (left ret))
      (assign (left tmp) (right ret))
      (assign (left ret) x)
      (assign (right ret) tmp)
      (assign (color tmp) (IntConst 1))
      (return)
     Else
      (assign (right x) (left tmp))
      (assign (left tmp) x)
      (assign (color (right tmp)) (IntConst 1))
      (assign ret tmp)
      (return)
    )
  )
)))

(Program rbt_insert (x k) (ret))
(Pre (and (RBT x) (< minus_infty k) (< k plus_infty) ))
(Post (and (RBT ret) (= (Keys ret) (SetAdd (Old (Keys x)) k))
           (ite (< k (Old (Min x))) (= (Min ret) k) (= (Min ret) (Old (Min x))))
           (ite (> k (Old (Max x))) (= (Max ret) k) (= (Max ret) (Old (Max x)))) ))

(call rbt_insert_helper (x k) (ret))
(assign (color ret) (IntConst 1))
(return)
