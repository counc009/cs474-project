(Var x Loc)
(Var k Int)

(Function next Loc Loc)
(Function key  Loc Int)

(Var plus_infty Int)
(RecFunction Min Loc Int)
(RecDef (Min x) (ite (= x nil) plus_infty (ite (< (key x) (Min (next x))) (key x) (Min (next x)))))

(RecFunction Keys   Loc SetInt)
(RecFunction Sorted Loc Bool)

(RecDef (Keys x) (ite (= x nil) EmptySetInt
                 (SetAdd (Keys (next x)) (key x))))
(RecDef (Sorted x) (ite (= x nil) True
                      (and (Sorted (next x))
                           (not (IsMember x (Sp (Sorted (antiSp (next x))))))
                           (<= (key x) (Min (next x))))))

(lemma (x) (< (key x) plus_infty))
(lemma (x) (=> (Sorted x) (= (SPKeys x) (SPSorted x))))

(Var l1 Loc)
(Var l2 Loc)
(lemma (l1 l2) (=> (= (Keys l1) (SetAdd (Keys l2) k))
                   (ite (< k (Min l2))
                        (= (Min l1) k)
                        (= (Min l1) (Min l2)))))

(Var ret Loc)
(Var oldkeysx SetInt)
(Var aux Loc)
(Var auxkeys SetInt)
(Var tmp Loc)

(Program sorted_insert (x oldkeysx k ret))
(Pre (and (Sorted x) (= (Keys x) oldkeysx)))
(Post (and (Sorted ret) (= (Keys ret) (SetAdd oldkeysx k))))

(If (= x nil)
 Then
  (alloc ret)
  (assume (not (= ret nil)))
  (assign (key ret) k)
  (assign (next ret) nil)
  (return)
 Else
  (If (> k (key x))
   Then
    (assign aux (next x))
    (assign auxkeys (Keys aux))
    (call sorted_insert (aux auxkeys k tmp))
    (assign (next x) tmp)
    (assign ret x)
    (return)
   Else
    (alloc ret)
    (assume (not (= ret nil)))
    (assign (key ret) k)
    (assign (next ret) x)
    (return)
  )
)
