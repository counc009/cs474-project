(Function key   Loc Int)
(Function prio  Loc Int)
(Function left  Loc Loc)
(Function right Loc Loc)

(RecFunction MinKey  Loc Int)
(RecFunction MaxKey  Loc Int)
(RecFunction MaxPrio Loc Int)

(RecFunction Treap      Loc Bool)
(RecFunction Keys       Loc SetInt)
(RecFunction Priorities Loc SetInt)

(Var x Loc)
(Var plus_infty Int)
(Var minus_infty Int)

(lemma (x) (< (key x) plus_infty))
(lemma (x) (< minus_infty (key x)))
(lemma (x) (< minus_infty (prio x)))

(RecDef (MinKey x)
  (ite (= x nil) plus_infty
    (ite (<= (key x) (MinKey (left x)))
      (ite (<= (key x) (MinKey (right x)))
        (key x)
        (MinKey (right x))
      )
      (ite (<= (MinKey (left x)) (MinKey (right x)))
        (MinKey (left x))
        (MinKey (right x))))))

(RecDef (MaxKey x)
  (ite (= x nil) minus_infty
    (ite (>= (key x) (MaxKey (left x)))
      (ite (>= (key x) (MaxKey (right x)))
        (key x)
        (MaxKey (right x))
      )
      (ite (>= (MaxKey (left x)) (MaxKey (right x)))
        (MaxKey (left x))
        (MaxKey (right x))))))
(RecDef (MaxPrio x)
  (ite (= x nil) minus_infty
    (ite (>= (prio x) (MaxPrio (left x)))
      (ite (>= (prio x) (MaxPrio (right x)))
        (prio x)
        (MaxPrio (right x))
      )
      (ite (>= (MaxPrio (left x)) (MaxPrio (right x)))
        (MaxPrio (left x))
        (MaxPrio (right x))))))

(RecDef (Treap x)
  (ite (= x nil) True
    (and (Treap (left x))  (< (MaxKey (left x)) (key x))  (< (MaxPrio (left x)) (prio x))
         (Treap (right x)) (< (key x) (MinKey (right x))) (< (MaxPrio (right x)) (prio x))
         (= EmptySetInt (SetIntersect (Priorities (left x)) (Priorities (right x))))
         (not (IsMember x (Sp (Treap (antiSp (left x))))))
         (not (IsMember x (Sp (Treap (antiSp (right x))))))
         (= EmptySetInt (SetIntersect (Sp (Treap (antiSp (left x))))
                                      (Sp (Treap (antiSp (right x))))))
         )))

(RecDef (Keys x)
  (ite (= x nil) EmptySetInt
    (SetAdd (SetUnion (Keys (left x)) (Keys (right x))) (key x))))
(RecDef (Priorities x)
  (ite (= x nil) EmptySetInt
    (SetAdd (SetUnion (Priorities (left x)) (Priorities (right x))) (prio x))))

(Var k Int)
(Var ret Bool)
(Var aux Loc)

(lemma (x) (=> (Treap x) (= (Sp (Treap x)) (Sp (Keys x)))))
(lemma (x) (=> (Treap x) (= (Sp (Treap x)) (Sp (Priorities x)))))
(lemma (x) (=> (Treap x) (= (Sp (Treap x)) (Sp (MinKey x)))))
(lemma (x) (=> (Treap x) (= (Sp (Treap x)) (Sp (MaxKey x)))))
(lemma (x) (=> (Treap x) (= (Sp (Treap x)) (Sp (MaxPrio x)))))

(lemma (x) (=> (< k (MinKey x)) (not (IsMember k (Keys x)))))
(lemma (x) (=> (> k (MaxKey x)) (not (IsMember k (Keys x)))))

(Program treap_find_rec (x k ret))
(Pre (Treap x))
(Post (and (Treap x) (= (Keys x) (Old (Keys x)))
           (=> (IsMember k (Keys x)) ret) (=> ret (IsMember k (Keys x)))
           (ite True True (= (left x) (left x)))
           (ite True True (= (right x) (right x))) ))

(If (= x nil)
 Then
  (assign ret False)
  (return)
 Else
  (If (= k (key x))
   Then
    (assign ret True)
    (return)
   Else
    (If (< k (key x))
     Then
      (assign aux (left x))
      (call treap_find_rec (aux k ret))
      (return)
     Else
      (assign aux (right x))
      (call treap_find_rec (aux k ret))
      (return)
    )
  )
)
